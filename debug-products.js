const mongoose = require('mongoose');
const Product = require('./models/Product.js');
require('dotenv').config();

async function debugProducts() {
    try {
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const totalCount = await Product.countDocuments();
        console.log('üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ:', totalCount);

        if (totalCount === 0) {
            console.log('‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤!');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const sampleProduct = await Product.findOne().lean();
        console.log('\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤—Å–µ –ø–æ–ª—è):');
        console.log('–ö–ª—é—á–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', Object.keys(sampleProduct));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ section
        if (sampleProduct.section) {
            console.log('\nüìã –ü–æ–ª–µ section:', {
                _id: sampleProduct.section._id,
                productCategoryName: sampleProduct.section.productCategoryName,
                path: sampleProduct.section.path
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ hlSectionId
        console.log('\nüìã –ü–æ–ª–µ hlSectionId:', sampleProduct.hlSectionId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ productValues
        console.log('\nüìã –ü–æ–ª–µ productValues:', {
            exists: !!sampleProduct.productValues,
            type: typeof sampleProduct.productValues,
            keys: sampleProduct.productValues ? Object.keys(sampleProduct.productValues) : null
        });

        if (sampleProduct.productValues) {
            console.log('productValues —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', {
                keys: Object.keys(sampleProduct.productValues),
                firstKey: Object.keys(sampleProduct.productValues)[0],
                firstValue: sampleProduct.productValues[Object.keys(sampleProduct.productValues)[0]]
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç productValues
            const firstKey = Object.keys(sampleProduct.productValues)[0];
            const firstValue = sampleProduct.productValues[firstKey];
            
            console.log('\nüìã –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç productValues:');
            console.log('–ö–ª—é—á:', firstKey);
            console.log('–ó–Ω–∞—á–µ–Ω–∏–µ:', {
                type: typeof firstValue,
                keys: firstValue ? Object.keys(firstValue) : null,
                hasNode: !!firstValue?.node,
                nodeKeys: firstValue?.node ? Object.keys(firstValue.node) : null
            });

            if (firstValue && firstValue.node) {
                console.log('node.title:', firstValue.node.title);
                console.log('node.value:', firstValue.node.value);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã productValues
            console.log('\nüìã –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã productValues:');
            Object.keys(sampleProduct.productValues).forEach((key, index) => {
                const value = sampleProduct.productValues[key];
                console.log(`  ${index + 1}. –ö–ª—é—á: ${key}, title: ${value?.node?.title}, value: ${value?.node?.value}`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å section._id
        const withSectionId = await Product.countDocuments({
            'section._id': { $exists: true }
        });
        console.log('\nüìã –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å section._id:', withSectionId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å productValues
        const withProductValues = await Product.countDocuments({
            productValues: { $exists: true }
        });
        console.log('üìã –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å productValues:', withProductValues);

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ section._id
        const uniqueSectionIds = await Product.distinct('section._id');
        console.log('\nüìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ section._id:', uniqueSectionIds);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –æ–±–æ–∏–º–∏ –ø–æ–ª—è–º–∏
        const withBoth = await Product.countDocuments({
            'section._id': { $exists: true },
            productValues: { $exists: true }
        });
        console.log('üìã –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å section._id –∏ productValues:', withBoth);

        if (withBoth > 0) {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            const goodProduct = await Product.findOne({
                'section._id': { $exists: true },
                productValues: { $exists: true }
            }).select('section productValues hlSectionId').lean();

            console.log('\n‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
            console.log('section._id:', goodProduct.section._id);
            console.log('hlSectionId:', goodProduct.hlSectionId);
            console.log('productValues keys:', Object.keys(goodProduct.productValues));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã productValues
            Object.keys(goodProduct.productValues).forEach((key, index) => {
                const value = goodProduct.productValues[key];
                console.log(`  ${index + 1}. ${value?.node?.title}: ${value?.node?.value}`);
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    }
}

debugProducts().catch(console.error); 