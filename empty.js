#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.trim());
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function directoryExists(dirPath) {
    try {
        return fs.statSync(dirPath).isDirectory();
    } catch (error) {
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
function getFileSize(filePath) {
    try {
        const stats = fs.statSync(filePath);
        return stats.size;
    } catch (error) {
        return 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 4KB
function findFiles4KB(directory, files = []) {
    try {
        const items = fs.readdirSync(directory);
        
        for (const item of items) {
            const fullPath = path.join(directory, item);
            
            try {
                const stats = fs.statSync(fullPath);
                
                if (stats.isDirectory()) {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
                    findFiles4KB(fullPath, files);
                } else if (stats.isFile()) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 4KB: –æ—Ç 3072 –¥–æ 4096 –±–∞–π—Ç)
                    // –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–µ find -size 4k
                    if (stats.size >= 4096 && stats.size <= 10000) {
                        files.push({
                            name: item,
                            path: fullPath,
                            size: stats.size
                        });
                    }
                }
            } catch (error) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
                console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫: ${fullPath}`);
            }
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${directory}`);
    }
    
    return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
function saveResultsToFile(files, outputFile) {
    try {
        const content = files.map(file => file.name).join('\n');
        fs.writeFileSync(outputFile, content, 'utf8');
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º ~4 –∫–∏–ª–æ–±–∞–π—Ç–∞');
    console.log('=====================================\n');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    let sourceDir = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏): ');
    
    if (!sourceDir) {
        sourceDir = process.cwd();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!directoryExists(sourceDir)) {
        console.log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sourceDir}`);
        rl.close();
        return;
    }
    
    console.log(`\nüìÅ –ü–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${sourceDir}`);
    console.log('‚è≥ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...\n');
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º 4KB
    const files = findFiles4KB(sourceDir);
    
    if (files.length === 0) {
        console.log('‚ùå –§–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º ~4 –∫–∏–ª–æ–±–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        rl.close();
        return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º ~4KB: ${files.length}\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
    console.log('üìã –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
    files.slice(0, 10).forEach((file, index) => {
        console.log(`${index + 1}. ${file.name} (${file.path})`);
    });
    
    if (files.length > 10) {
        console.log(`... –∏ –µ—â–µ ${files.length - 10} —Ñ–∞–π–ª–æ–≤`);
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const outputFile = await askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: files_4kb.txt): ');
    const finalOutputFile = outputFile || 'files_4kb.txt';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (saveResultsToFile(files, finalOutputFile)) {
        console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${finalOutputFile}`);
        console.log(`üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    }
    
    rl.close();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    rl.close();
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    rl.close();
    process.exit(1);
}); 