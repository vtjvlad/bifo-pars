const mongoose = require('mongoose');
const Product = require('./models/Product.js');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

class FiltersJsonExporter {
    constructor() {
        this.stats = {
            totalProducts: 0,
            processedProducts: 0,
            totalSections: 0,
            totalFilters: 0,
            errors: 0
        };
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async connectToDatabase() {
        try {
            await mongoose.connect(process.env.MONGO_URI);
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
            throw error;
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async disconnectFromDatabase() {
        try {
            await mongoose.disconnect();
            console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB:', error.message);
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ productValues
    extractFiltersFromProductValues(productValues) {
        const filters = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ title

        if (!productValues || !productValues.edges || !Array.isArray(productValues.edges)) {
            return filters;
        }

        productValues.edges.forEach(edge => {
            if (edge && edge.node) {
                const { title, value } = edge.node;
                
                if (title && value) {
                    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Å —Ç–∞–∫–∏–º title —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if (filters.has(title)) {
                        const existingFilter = filters.get(title);
                        if (!existingFilter.values.includes(value)) {
                            existingFilter.values.push(value);
                        }
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                        filters.set(title, {
                            title: title,
                            values: [value]
                        });
                    }
                }
            }
        });

        return filters;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSON
    async processProductsToJson() {
        try {
            console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è JSON...');
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            this.stats.totalProducts = await Product.countDocuments();
            console.log(`üìà –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${this.stats.totalProducts}`);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ hlSectionId
            const productsBySection = await Product.aggregate([
                {
                    $match: {
                        hlSectionId: { $exists: true },
                        productValues: { $exists: true }
                    }
                },
                {
                    $group: {
                        _id: '$hlSectionId',
                        products: { $push: '$$ROOT' }
                    }
                }
            ]);

            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${productsBySection.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π`);

            const jsonData = [];

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
            for (const section of productsBySection) {
                const sectionId = section._id;
                const products = section.products;

                console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é ${sectionId} (${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)`);

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
                const sectionFilters = new Map();

                for (const product of products) {
                    this.stats.processedProducts++;
                    
                    if (product.productValues) {
                        const productFilters = this.extractFiltersFromProductValues(product.productValues);
                        
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –æ–±—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–µ–∫—Ü–∏–∏
                        productFilters.forEach((filter, title) => {
                            if (sectionFilters.has(title)) {
                                const existingFilter = sectionFilters.get(title);
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                filter.values.forEach(value => {
                                    if (!existingFilter.values.includes(value)) {
                                        existingFilter.values.push(value);
                                    }
                                });
                            } else {
                                sectionFilters.set(title, filter);
                            }
                        });
                    }
                }

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                sectionFilters.forEach((filter, title) => {
                    jsonData.push({
                        sectionId: sectionId,
                        node: {
                            filter: title,
                            values: filter.values
                        }
                    });
                });

                this.stats.totalSections++;
                this.stats.totalFilters += sectionFilters.size;
                console.log(`‚úÖ –°–µ–∫—Ü–∏—è ${sectionId}: —Å–æ–∑–¥–∞–Ω–æ ${sectionFilters.size} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
            }

            return jsonData;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error.message);
            this.stats.errors++;
            throw error;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
    async saveJsonFile(data, filename = 'filters.json') {
        try {
            const filePath = path.join(__dirname, filename);
            await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
            console.log(`üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
            return filePath;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞:', error.message);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é filters
    async loadJsonToDatabase(filePath) {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é filters...');
            
            const Filter = require('./models/Filter.js');
            const jsonData = JSON.parse(await fs.readFile(filePath, 'utf8'));
            
            let savedCount = 0;
            let updatedCount = 0;

            for (const filterData of jsonData) {
                try {
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
                    const filterId = `${filterData.sectionId}_${filterData.node.filter}`;
                    
                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π
                    const filterObject = {
                        _id: filterId,
                        title: filterData.node.filter,
                        type: 'checkbox', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        sectionId: filterData.sectionId,
                        values: filterData.node.values.map((value, index) => ({
                            _id: `${filterId}_value_${index}`,
                            title: value,
                            isPublic: true,
                            productsCount: 0,
                            totalProductsCount: 0,
                            popularity: 0,
                            __typename: 'FilterValue'
                        })),
                        popularity: 0,
                        isPublic: true,
                        isWrappable: false,
                        isExcludable: false,
                        useValuesSearch: false,
                        __typename: 'Filter'
                    };

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä
                    const existingFilter = await Filter.findById(filterId);
                    
                    if (existingFilter) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä
                        await Filter.findByIdAndUpdate(filterId, filterObject, { new: true });
                        updatedCount++;
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                        const newFilter = new Filter(filterObject);
                        await newFilter.save();
                        savedCount++;
                    }

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ${filterData.sectionId}_${filterData.node.filter}:`, error.message);
                    this.stats.errors++;
                }
            }

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${savedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
            return { saved: savedCount, updated: updatedCount };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    printStats() {
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:');
        console.log(`üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.stats.totalProducts}`);
        console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.stats.processedProducts}`);
        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–∫—Ü–∏–π: ${this.stats.totalSections}`);
        console.log(`üéØ –°–æ–∑–¥–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${this.stats.totalFilters}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
    async exportFiltersToJson(saveToDatabase = true) {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ JSON...');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º JSON
            const jsonData = await this.processProductsToJson();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª
            const filePath = await this.saveJsonFile(jsonData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (saveToDatabase) {
                await this.loadJsonToDatabase(filePath);
            }
            
            this.printStats();
            
            console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            return filePath;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error.message);
            throw error;
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const exporter = new FiltersJsonExporter();
    
    try {
        await exporter.connectToDatabase();
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await exporter.exportFiltersToJson(true);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await exporter.disconnectFromDatabase();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = FiltersJsonExporter; 