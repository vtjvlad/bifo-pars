const mongoose = require('mongoose');
const HotlineFiltersParser = require('./pars/hotline-filters-parser.js');
const Filter = require('./models/Filter.js');
require('dotenv').config();

class FiltersDatabaseInitializer {
    constructor() {
        this.parser = new HotlineFiltersParser();
        this.stats = {
            totalCategories: 0,
            processedCategories: 0,
            totalFilters: 0,
            savedFilters: 0,
            errors: 0
        };
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async connectToDatabase() {
        try {
            await mongoose.connect(process.env.MONGO_URI);
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
            throw error;
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async disconnectFromDatabase() {
        try {
            await mongoose.disconnect();
            console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB:', error.message);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    async clearExistingFilters() {
        try {
            const count = await Filter.countDocuments();
            if (count > 0) {
                console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
                const result = await Filter.deleteMany({});
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
            } else {
                console.log('üì≠ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error.message);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveFilterToDatabase(filterData, sectionId, categoryUrl, categoryName) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Ñ–∏–ª—å—Ç—Ä—É
            const filterWithCategory = {
                ...filterData,
                sectionId: sectionId,
                categoryUrl: categoryUrl,
                categoryName: categoryName
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä
            const existingFilter = await Filter.findById(filterData._id);
            
            if (existingFilter) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä
                await Filter.findByIdAndUpdate(filterData._id, filterWithCategory, { new: true });
                console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterData.title} (${filterData._id})`);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                const newFilter = new Filter(filterWithCategory);
                await newFilter.save();
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: ${filterData.title} (${filterData._id})`);
            }

            this.stats.savedFilters++;
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ${filterData._id}:`, error.message);
            this.stats.errors++;
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async processCategory(categoryData) {
        const { url: categoryUrl, sectionId } = categoryData;
        const categoryName = this.parser.extractPathFromUrl(categoryUrl);

        console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryName} (sectionId: ${sectionId})`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await this.parser.getTokensForCategory(categoryUrl);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const filters = await this.parser.getCategoryFilters(sectionId, categoryUrl);

            if (!filters || filters.length === 0) {
                console.log(`‚ö†Ô∏è –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
                return;
            }

            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${filters.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            for (const filter of filters) {
                await this.saveFilterToDatabase(filter, sectionId, categoryUrl, categoryName);
            }

            this.stats.processedCategories++;
            this.stats.totalFilters += filters.length;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
            this.stats.errors++;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async initializeFiltersDatabase(clearExisting = false) {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

        try {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.connectToDatabase();

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (clearExisting) {
                await this.clearExistingFilters();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
            console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞...');
            const categories = await this.parser.loadCategoriesFromFile('pars/categories-filters.txt');
            
            if (categories.length === 0) {
                console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                return;
            }

            this.stats.totalCategories = categories.length;
            console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            for (let i = 0; i < categories.length; i++) {
                const categoryData = categories[i];
                console.log(`\n[${i + 1}/${categories.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...`);
                
                await this.processCategory(categoryData);

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                if (i < categories.length - 1) {
                    console.log('‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
                    await this.parser.delay(2000);
                }
            }

            // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.printFinalStats();

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        } finally {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.disconnectFromDatabase();
        }
    }

    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    printFinalStats() {
        console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:');
        console.log(`   –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${this.stats.totalCategories}`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${this.stats.processedCategories}`);
        console.log(`   –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${this.stats.totalFilters}`);
        console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${this.stats.savedFilters}`);
        console.log(`   –û—à–∏–±–æ–∫: ${this.stats.errors}`);
        
        const successRate = this.stats.totalCategories > 0 ? 
            (this.stats.processedCategories / this.stats.totalCategories * 100).toFixed(1) : 0;
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async getDatabaseStats() {
        try {
            await this.connectToDatabase();
            
            const totalFilters = await Filter.countDocuments();
            const uniqueCategories = await Filter.distinct('sectionId');
            const filterTypes = await Filter.distinct('type');
            
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:');
            console.log(`   –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${totalFilters}`);
            console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${uniqueCategories.length}`);
            console.log(`   –¢–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${filterTypes.join(', ')}`);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categoryStats = await Filter.aggregate([
                {
                    $group: {
                        _id: '$sectionId',
                        count: { $sum: 1 },
                        categoryName: { $first: '$categoryName' }
                    }
                },
                { $sort: { count: -1 } }
            ]);

            console.log('\nüìã –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
            categoryStats.forEach(stat => {
                console.log(`   ${stat.categoryName || `Section ${stat._id}`}: ${stat.count} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        } finally {
            await this.disconnectFromDatabase();
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const initializer = new FiltersDatabaseInitializer();
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
    const CLEAR_EXISTING = process.argv.includes('--clear');
    const SHOW_STATS = process.argv.includes('--stats');
    
    if (SHOW_STATS) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await initializer.getDatabaseStats();
    } else {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initializer.initializeFiltersDatabase(CLEAR_EXISTING);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = FiltersDatabaseInitializer; 