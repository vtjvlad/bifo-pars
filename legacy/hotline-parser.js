const axios = require('axios');
const fs = require('fs').promises;
const cliProgress = require('cli-progress');
const { XTOKEN, XREQUESTID } = require('./tt')();

// async function getTokens() {
//     const tokensFile = await JSON.parse(fs.readFileSync('./tokens.json', 'utf8'));
    
//     const tokens = JSON.stringify(tokensFile);

//     return tokens

// }

// getTokens();

// console.log(`${tokens}`)

// async function getTokens() {
//     const tokensFile = JSON.parse(fs.readFileSync('./tokens.json', 'utf8'));
//     const tokens = JSON.stringify(tokensFile);
//     return tokens;
// }

// getTokens().then(tokens => {
//     console.log(`${tokens}`);
// });

class HotlineParser {
    constructor() {
        this.baseUrl = 'https://hotline.ua/svc/frontend-api/graphql';
        this.headers = {
            'accept': '*/*',
            'content-type': 'application/json',
            'x-language': 'uk',
            'x-referer': 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/',
            "x-token": `${XTOKEN}`,
            "x-request-id": `${XREQUESTID}`,
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        };
        this.progressBar = null;
        this.startTime = null;
        this.logBuffer = [];
        this.progressActive = false;
    }

    generateRequestId() {
        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    }

    initProgressBar(totalPages) {
        try {
            this.startTime = Date.now();
            this.progressActive = true;
            this.logBuffer = [];
            
            this.progressBar = new cliProgress.SingleBar({
                format: 'üìä –ü–∞—Ä—Å–∏–Ω–≥ |{bar}| {percentage}% | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {value}/{total} | {speed} —Å—Ç—Ä/—Å | ETA: {eta}s | –¢–æ–≤–∞—Ä–æ–≤: {products}',
                barCompleteChar: '\u2588',
                barIncompleteChar: '\u2591',
                hideCursor: true,
                clearOnComplete: false,
                stopOnComplete: false,
                forceRedraw: true
            }, cliProgress.Presets.rect);
            
            this.progressBar.start(totalPages, 0, {
                speed: '0.0',
                eta: '‚àû',
                products: '0'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞:', error.message);
            this.progressActive = false;
        }
    }

    updateProgress(currentPage, productsCount = 0) {
        if (!this.progressBar || !this.progressActive) return;
        
        try {
            const elapsed = (Date.now() - this.startTime) / 1000;
            const speed = currentPage / elapsed;
            const eta = Math.round((this.progressBar.total - currentPage) / speed);
            
            this.progressBar.update(currentPage, {
                speed: speed.toFixed(1),
                eta: isFinite(eta) ? eta : '‚àû',
                products: productsCount.toString()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞:', error.message);
        }
    }

    stopProgress() {
        if (this.progressBar && this.progressActive) {
            try {
                this.progressBar.stop();
                this.progressActive = false;
                
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
                if (this.logBuffer.length > 0) {
                    this.logBuffer.forEach(msg => console.log(msg));
                    this.logBuffer = [];
                }
                
                this.progressBar = null;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞:', error.message);
            }
        }
    }

    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        const formattedMessage = `[${timestamp}] ${message}`;
        
        if (this.progressActive && this.progressBar) {
            // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            this.logBuffer.push(formattedMessage);
            
            // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if (this.logBuffer.length > 10) {
                this.flushLogs();
            }
        } else {
            console.log(formattedMessage);
        }
    }

    flushLogs() {
        if (this.logBuffer.length === 0) return;
        
        if (this.progressActive && this.progressBar) {
            try {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
                process.stdout.write('\r\x1b[K');
                
                // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                this.logBuffer.forEach(msg => console.log(msg));
                this.logBuffer = [];
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                this.progressBar.render();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤:', error.message);
            }
        } else {
            this.logBuffer.forEach(msg => console.log(msg));
            this.logBuffer = [];
        }
    }

    async getProducts(page = 1, itemsPerPage = 48) {
        const query = `
            query getCatalogProducts($path: String!, $cityId: Int, $sort: String, $showFirst: String, $phrase: String, $itemsPerPage: Int, $page: Int, $filters: [Int], $excludedFilters: [Int], $priceMin: Int, $priceMax: Int) {
                byPathSectionQueryProducts(path: $path, cityId: $cityId, sort: $sort, showFirst: $showFirst, phrase: $phrase, itemsPerPage: $itemsPerPage, page: $page, filters: $filters, excludedFilters: $excludedFilters, priceMin: $priceMin, priceMax: $priceMax) {
                    collection {
                        _id
                        title
                        date
                        vendor {
                            title
                            __typename
                        }
                        section {
                            _id
                            productCategoryName
                            __typename
                        }
                        isPromo
                        toOfficial
                        promoBid
                        lineName
                        linePathNew
                        imagesCount
                        videosCount
                        techShortSpecifications
                        techShortSpecificationsList
                        reviewsCount
                        questionsCount
                        url
                        imageLinks
                        minPrice
                        maxPrice
                        salesCount
                        isNew
                        colorsProduct
                        offerCount
                        singleOffer {
                            _id
                            conversionUrl
                            firmId
                            firmTitle
                            price
                            firmExtraInfo
                            delivery {
                                deliveryMethods
                                hasFreeDelivery
                                isSameCity
                                name
                                __typename
                            }
                            __typename
                        }
                        madeInUkraine
                        userSubscribed
                        __typename
                    }
                    paginationInfo {
                        lastPage
                        totalCount
                        itemsPerPage
                        __typename
                    }
                    __typename
                }
            }
        `;

        const variables = {
            path: "mobilnye-telefony-i-smartfony",
            cityId: 5394,
            page: page,
            sort: "popularity",
            itemsPerPage: itemsPerPage,
            filters: [],
            excludedFilters: []
        };

        try {
            const response = await axios.post(this.baseUrl, {
                operationName: "getCatalogProducts",
                variables: variables,
                query: query
            }, {
                headers: this.headers
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if (!response.data) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }

            if (response.data.errors) {
                this.log('–û—à–∏–±–∫–∏ GraphQL: ' + JSON.stringify(response.data.errors));
                throw new Error(`GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(response.data.errors)}`);
            }

            if (!response.data.data) {
                this.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: ' + JSON.stringify(response.data, null, 2));
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –≤ –æ—Ç–≤–µ—Ç–µ');
            }

            if (!response.data.data.byPathSectionQueryProducts) {
                this.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: ' + JSON.stringify(response.data.data, null, 2));
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç byPathSectionQueryProducts –≤ –æ—Ç–≤–µ—Ç–µ');
            }

            return response.data;
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
            if (error.response) {
                this.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ' + error.response.status);
                this.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ' + JSON.stringify(error.response.headers));
                this.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ' + JSON.stringify(error.response.data));
            }
            throw error;
        }
    }

    async getAllProducts(saveProgressively = true, saveInterval = 5) {
        let allProducts = [];
        let currentPage = 1;
        let totalPages = 1;

        try {
            this.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤...');
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            const firstPageData = await this.getProducts(currentPage);
            // totalPages = firstPageData.data.byPathSectionQueryProducts.paginationInfo.lastPage;
            function getTotalPages(firstPageData) {
                return firstPageData.data.byPathSectionQueryProducts.paginationInfo.itemsPerPage / 48;
            }

            totalPages = getTotalPages(firstPageData);
            this.log(`üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);
            this.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${firstPageData.data.byPathSectionQueryProducts.paginationInfo.itemsPerPage}`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.initProgressBar(totalPages);
            let productsCount = firstPageData.data.byPathSectionQueryProducts.collection.length;
            this.updateProgress(1, productsCount); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            allProducts = allProducts.concat(firstPageData.data.byPathSectionQueryProducts.collection);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if (saveProgressively) {
                await this.saveToFileProgressive(firstPageData.data.byPathSectionQueryProducts.collection);
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (let page = 2; page <= totalPages; page++) {
                const pageData = await this.getProducts(page);
                const pageProducts = pageData.data.byPathSectionQueryProducts.collection;
                allProducts = allProducts.concat(pageProducts);
                productsCount += pageProducts.length;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
                this.updateProgress(page, productsCount);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
                if (saveProgressively && page % saveInterval === 0) {
                    await this.saveToFileProgressive(pageProducts);
                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
                    this.flushLogs();
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await this.delay(1000);
            }

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            this.updateProgress(totalPages, productsCount);
            
            // –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            this.flushLogs();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.stopProgress();

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            if (saveProgressively) {
                this.log('üíæ –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
                await this.saveToFile(allProducts);
            }

            this.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            return allProducts;

        } catch (error) {
            // –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            this.flushLogs();
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.stopProgress();
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message);
            throw error;
        }
    }

    async saveToFileProgressive(products, filename = 'hotline-products.json') {
        try {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            let existingProducts = [];
            try {
                const fileContent = await fs.readFile(filename, 'utf8');
                existingProducts = JSON.parse(fileContent);
            } catch (error) {
                // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                this.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            const allProducts = existingProducts.concat(products);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await fs.writeFile(filename, JSON.stringify(allProducts, null, 2), 'utf8');
            this.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename} (–≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length})`);
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            throw error;
        }
    }

    async saveToFile(products, filename = 'hotline-products.json') {
        try {
            await fs.writeFile(filename, JSON.stringify(products, null, 2), 'utf8');
            this.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            throw error;
        }
    }

    // async saveThePagination(paginationInfo, filename = 'hotline-pagination.json') {
    //     try {
    //         await fs.writeFile(filename, JSON.stringify(paginationInfo, null, 2), 'utf8');
    //         console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
    //     } catch (error) {
    //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
    //         throw error;
    //     }
    // }

    async saveToCSV(products, filename = 'hotline-products.csv') {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
            const BOM = '\uFEFF';
            const csvHeader = BOM + 'ID,–ù–∞–∑–≤–∞–Ω–∏–µ,–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞,–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π,URL,–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n';
            
            const csvRows = products.map(product => {
                // –û—á–∏—â–∞–µ–º –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                const cleanText = (text) => {
                    if (!text) return '';
                    return text.toString()
                        .replace(/"/g, '""')  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
                        .replace(/\n/g, ' ')  // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                        .replace(/\r/g, ' ')  // –ó–∞–º–µ–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
                        .replace(/\t/g, ' ')  // –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é
                        .trim();
                };

                const specs = product.techShortSpecificationsList && Array.isArray(product.techShortSpecificationsList) ? 
                    cleanText(product.techShortSpecificationsList.join('; ')) : '';
                const images = product.imageLinks && Array.isArray(product.imageLinks) ? 
                    cleanText(product.imageLinks.join('; ')) : 
                    (product.imageLinks ? cleanText(product.imageLinks.toString()) : '');
                
                return [
                    cleanText(product._id),
                    `"${cleanText(product.title)}"`,
                    `"${cleanText(product.vendor?.title)}"`,
                    `"${cleanText(product.section?.productCategoryName)}"`,
                    product.minPrice || '',
                    product.maxPrice || '',
                    product.offerCount || '',
                    `"${cleanText(product.url)}"`,
                    `"${images}"`,
                    `"${specs}"`
                ].join(',');
            });

            const csvContent = csvHeader + csvRows.join('\n');
            await fs.writeFile(filename, csvContent, 'utf8');
            this.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª: ${filename}`);
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: ' + error.message);
            throw error;
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    async getProductDetails(productId) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        this.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞ —Å ID: ${productId}`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
    filterByPrice(products, minPrice, maxPrice) {
        return products.filter(product => {
            const price = product.minPrice || product.maxPrice;
            return price >= minPrice && price <= maxPrice;
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    searchByName(products, searchTerm) {
        const term = searchTerm.toLowerCase();
        return products.filter(product => 
            product.title.toLowerCase().includes(term)
        );
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
async function main() {
    const parser = new HotlineParser();
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        // saveProgressively = true - –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        // saveInterval = 5 - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
        const products = await parser.getAllProducts(true, 5);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await parser.saveToCSV(products);
        
        // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        parser.log('\n=== –ü—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ===');
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (–æ—Ç 5000 –¥–æ 50000 –≥—Ä–Ω)
        const filteredByPrice = parser.filterByPrice(products, 5000, 50000);
        parser.log(`–¢–æ–≤–∞—Ä—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 5000-50000 –≥—Ä–Ω: ${filteredByPrice.length}`);
        
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const searchResults = parser.searchByName(products, 'iPhone');
        parser.log(`–¢–æ–≤–∞—Ä—ã —Å "iPhone" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: ${searchResults.length}`);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        parser.log('\n=== –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ ===');
        products.slice(0, 5).forEach((product, index) => {
            parser.log(`${index + 1}. ${product.title} - ${product.minPrice} –≥—Ä–Ω`);
        });
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
        parser.flushLogs();
        
    } catch (error) {
        parser.log('‚ùå –û—à–∏–±–∫–∞ –≤ main: ' + error.message);
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        parser.flushLogs();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = HotlineParser; 