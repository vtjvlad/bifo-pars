#!/usr/bin/env node

const inquirer = require('inquirer');
const chalk = require('chalk');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ora –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let ora = require('ora');
if (typeof ora !== 'function' && ora.default) ora = ora.default;

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç figlet –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let figlet = require('figlet');
if (typeof figlet !== 'function' && figlet.default) figlet = figlet.default;

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç boxen –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let boxen = require('boxen');
if (typeof boxen !== 'function' && boxen.default) boxen = boxen.default;

const cliProgress = require('cli-progress');
const HotlineParser = require('./hotline-parser');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é chalk –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
if (chalk.level > 0) {
    // chalk v4+ (CommonJS)
    chalk.level = 3; // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞
} else {
    // chalk v5+ (ESM) - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chalk v4: npm install chalk@4.1.2');
}

class HotlineCLI {
    constructor() {
        this.parser = new HotlineParser();
        this.config = {
            batchSize: 15,
            autoGetTokens: true,
            saveProgressively: true,
            saveInterval: 25,
            testPerformance: false,
            maxBatchSize: 25
        };
        this.selectedCategoriesFile = 'tctgr/categories.txt'; // –§–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    showHeader() {
        console.clear();
        console.log(
            chalk.cyan(
                figlet.textSync('Hotline Parser', { 
                    horizontalLayout: 'full',
                    font: 'Standard'
                })
            )
        );
        
        console.log(
            boxen(
                chalk.yellow('üöÄ –ú—É–ª—å—Ç–∏–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Hotline.ua —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π'),
                {
                    padding: 1,
                    margin: 1,
                    borderStyle: 'round',
                    borderColor: 'cyan'
                }
            )
        );
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async showMainMenu() {
        const { action } = await inquirer.prompt([
            {
                type: 'list',
                name: 'action',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                choices: [
                    { name: 'üì¶ –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞', value: 'parse_all' },
                    { name: 'üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', value: 'select_file' },
                    { name: 'üéØ –ü–∞—Ä—Å–∏—Ç—å –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', value: 'parse_single' },
                    { name: '‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏', value: 'settings' },
                    { name: 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', value: 'test_performance' },
                    { name: 'üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤', value: 'test_tokens' },
                    { name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã', value: 'reports' },
                    { name: '‚ùå –í—ã—Ö–æ–¥', value: 'exit' }
                ]
            }
        ]);

        switch (action) {
            case 'parse_all':
                await this.parseAllCategories();
                break;
            case 'select_file':
                await this.selectCategoriesFile();
                break;
            case 'parse_single':
                await this.parseSingleCategory();
                break;
            case 'settings':
                await this.showSettings();
                break;
            case 'test_performance':
                await this.testPerformance();
                break;
            case 'test_tokens':
                await this.testTokens();
                break;
            case 'reports':
                await this.showReports();
                break;
            case 'exit':
                this.exit();
                break;
        }
    }

    // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    async selectCategoriesFile() {
        this.showHeader();
        console.log(chalk.blue('üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'));
        console.log('');

        const fs = require('fs').promises;
        const path = require('path');

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tctgr –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            let allFiles = [];
            try {
                allFiles = await this.getAllFilesInDirectory('tctgr');
            } catch (error) {
                console.log(chalk.yellow('‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tctgr –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...'));
                await fs.mkdir('tctgr', { recursive: true });
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
            const files = allFiles.filter(file => 
                file.endsWith('.txt') || 
                file.endsWith('.csv') || 
                file.endsWith('.json')
            );

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
            const groupedFiles = this.groupFilesByFolder(files);

            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            const choices = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
            if (groupedFiles.root && groupedFiles.root.length > 0) {
                choices.push({ name: 'üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞', value: 'separator', disabled: true });
                groupedFiles.root.forEach(file => {
                    choices.push({ 
                        name: `   üìÑ ${file}`, 
                        value: file 
                    });
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫
            Object.keys(groupedFiles).forEach(folder => {
                if (folder !== 'root' && groupedFiles[folder].length > 0) {
                    choices.push({ name: `üìÅ ${folder}`, value: 'separator', disabled: true });
                    groupedFiles[folder].forEach(file => {
                        choices.push({ 
                            name: `   üìÑ ${file}`, 
                            value: `${folder}/${file}` 
                        });
                    });
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
            choices.push(
                { name: 'üìù –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é', value: 'manual' },
                { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
            );

            if (choices.length === 1) {
                choices.unshift({ name: 'üìù –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é', value: 'manual' });
            }

            const { selectedFile } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'selectedFile',
                    message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:',
                    choices: choices
                }
            ]);

            if (selectedFile === 'back') {
                return;
            }

            let filePath;
            if (selectedFile === 'manual') {
                const { manualPath } = await inquirer.prompt([
                    {
                        type: 'input',
                        name: 'manualPath',
                        message: '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:',
                        default: this.selectedCategoriesFile,
                        validate: (input) => {
                            if (!input.trim()) {
                                return '–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
                            }
                            return true;
                        }
                    }
                ]);
                filePath = manualPath.trim();
            } else if (selectedFile === 'separator') {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                return;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å tctgr/ –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ
                filePath = selectedFile.startsWith('tctgr/') ? selectedFile : `tctgr/${selectedFile}`;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            try {
                await fs.access(filePath);
                this.selectedCategoriesFile = filePath;
                console.log(chalk.green(`‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${filePath}`));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                const content = await fs.readFile(filePath, 'utf8');
                const lines = content.split('\n').filter(line => line.trim().length > 0);
                const validUrls = lines.filter(line => line.includes('hotline.ua'));
                
                console.log(chalk.cyan(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:`));
                console.log(chalk.cyan(`   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`));
                console.log(chalk.cyan(`   –í–∞–ª–∏–¥–Ω—ã—Ö URL: ${validUrls.length}`));
                
                if (validUrls.length === 0) {
                    console.log(chalk.yellow('‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL hotline.ua'));
                } else {
                    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
                    const { startParsing } = await inquirer.prompt([
                        {
                            type: 'confirm',
                            name: 'startParsing',
                            message: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞?',
                            default: true
                        }
                    ]);
                    
                    if (startParsing) {
                        console.log('');
                        await this.parseSelectedFile();
                    }
                }

            } catch (error) {
                console.log(chalk.red(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`));
                console.log(chalk.yellow('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏'));
            }

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    async parseAllCategories() {
        this.showHeader();
        console.log(chalk.blue('üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞'));
        console.log(chalk.cyan(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: ${this.selectedCategoriesFile}`));
        console.log('');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const fs = require('fs').promises;
            let categories;
            
            try {
                const content = await fs.readFile(this.selectedCategoriesFile, 'utf8');
                categories = content
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0 && !line.startsWith('#'))
                    .filter(line => line.includes('hotline.ua'));
            } catch (error) {
                console.log(chalk.red(`‚ùå –§–∞–π–ª ${this.selectedCategoriesFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`));
                console.log(chalk.yellow('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞'));
                await this.waitForEnter();
                return;
            }

            if (categories.length === 0) {
                console.log(chalk.red('‚ùå –í —Ñ–∞–π–ª–µ categories.txt –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL!'));
                await this.waitForEnter();
                return;
            }

            console.log(chalk.green(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`));
            categories.forEach((url, index) => {
                const categoryName = this.parser.extractPathFromUrl(url);
                console.log(chalk.cyan(`   ${index + 1}. ${categoryName}`));
            });

            console.log('');
            const { confirm } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'confirm',
                    message: '–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                    default: true
                }
            ]);

            if (!confirm) {
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const spinner = ora('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...').start();
            
            const results = await this.parser.parseAllCategories(
                categories, 
                this.config.saveProgressively, 
                this.config.batchSize, 
                this.config.autoGetTokens
            );

            spinner.succeed('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showParseResults(results);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async parseSingleCategory() {
        this.showHeader();
        console.log(chalk.blue('üéØ –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'));
        console.log('');

        const { categoryUrl } = await inquirer.prompt([
            {
                type: 'input',
                name: 'categoryUrl',
                message: '–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
                default: 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/',
                validate: (input) => {
                    if (!input.includes('hotline.ua')) {
                        return 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å hotline.ua';
                    }
                    return true;
                }
            }
        ]);

        try {
            const spinner = ora('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...').start();
            
            const products = await this.parser.getAllProducts(
                this.config.saveProgressively,
                this.config.saveInterval,
                this.config.batchSize,
                categoryUrl
            );

            spinner.succeed(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.showProductStats(products);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    async showSettings() {
        this.showHeader();
        console.log(chalk.blue('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞'));
        console.log('');

        const { setting } = await inquirer.prompt([
            {
                type: 'list',
                name: 'setting',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
                choices: [
                    { name: `üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${this.config.batchSize}`, value: 'batch_size' },
                    { name: `üîë –ê–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${this.config.autoGetTokens ? '–í–ö–õ' : '–í–´–ö–õ'}`, value: 'auto_tokens' },
                    { name: `üíæ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${this.config.saveProgressively ? '–í–ö–õ' : '–í–´–ö–õ'}`, value: 'save_progressive' },
                    { name: `‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${this.config.saveInterval}`, value: 'save_interval' },
                    { name: `üß™ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: ${this.config.maxBatchSize}`, value: 'max_batch' },
                    { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
                ]
            }
        ]);

        switch (setting) {
            case 'batch_size':
                await this.changeBatchSize();
                break;
            case 'auto_tokens':
                await this.toggleAutoTokens();
                break;
            case 'save_progressive':
                await this.toggleSaveProgressive();
                break;
            case 'save_interval':
                await this.changeSaveInterval();
                break;
            case 'max_batch':
                await this.changeMaxBatchSize();
                break;
            case 'back':
                return;
        }

        await this.showSettings();
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
    async changeBatchSize() {
        const { batchSize } = await inquirer.prompt([
            {
                type: 'number',
                name: 'batchSize',
                message: '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (5-50):',
                default: this.config.batchSize,
                validate: (input) => {
                    if (input < 1 || input > 50) {
                        return '–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50';
                    }
                    return true;
                }
            }
        ]);

        this.config.batchSize = batchSize;
        console.log(chalk.green(`‚úÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${batchSize}`));
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    async toggleAutoTokens() {
        const { autoTokens } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'autoTokens',
                message: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?',
                default: this.config.autoGetTokens
            }
        ]);

        this.config.autoGetTokens = autoTokens;
        console.log(chalk.green(`‚úÖ –ê–≤—Ç–æ–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${autoTokens ? '–í–ö–õ' : '–í–´–ö–õ'}`));
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async toggleSaveProgressive() {
        const { saveProgressive } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'saveProgressive',
                message: '–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö?',
                default: this.config.saveProgressively
            }
        ]);

        this.config.saveProgressively = saveProgressive;
        console.log(chalk.green(`‚úÖ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${saveProgressive ? '–í–ö–õ' : '–í–´–ö–õ'}`));
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async changeSaveInterval() {
        const { saveInterval } = await inquirer.prompt([
            {
                type: 'number',
                name: 'saveInterval',
                message: '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü):',
                default: this.config.saveInterval,
                validate: (input) => {
                    if (input < 1) {
                        return '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                    }
                    return true;
                }
            }
        ]);

        this.config.saveInterval = saveInterval;
        console.log(chalk.green(`‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${saveInterval}`));
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    async changeMaxBatchSize() {
        const { maxBatchSize } = await inquirer.prompt([
            {
                type: 'number',
                name: 'maxBatchSize',
                message: '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (5-50):',
                default: this.config.maxBatchSize,
                validate: (input) => {
                    if (input < 5 || input > 50) {
                        return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 50';
                    }
                    return true;
                }
            }
        ]);

        this.config.maxBatchSize = maxBatchSize;
        console.log(chalk.green(`‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${maxBatchSize}`));
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async testPerformance() {
        this.showHeader();
        console.log(chalk.blue('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'));
        console.log('');

        const { confirm } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∞—Ç—á–µ–π?',
                default: true
            }
        ]);

        if (!confirm) {
            return;
        }

        try {
            const spinner = ora('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...').start();
            
            const results = await this.parser.testBatchPerformance(this.config.maxBatchSize);
            
            spinner.succeed('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showPerformanceResults(results);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    async testTokens() {
        this.showHeader();
        console.log(chalk.blue('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤'));
        console.log('');

        const { confirm } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'confirm',
                message: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                default: true
            }
        ]);

        if (!confirm) {
            return;
        }

        try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            const testTokens = require('./test-tokens');
            await testTokens();

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–æ–≤
    async showReports() {
        this.showHeader();
        console.log(chalk.blue('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã'));
        console.log('');

        const fs = require('fs').promises;
        
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const jsonFiles = await this.getFilesInDirectory('JSON');

            if (jsonFiles.length === 0) {
                console.log(chalk.yellow('üìÅ –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'));
                console.log(chalk.cyan('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'));
            } else {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            console.log(chalk.green('üìÅ JSON —Ñ–∞–π–ª—ã:'));
                jsonFiles.forEach(file => {
                    console.log(chalk.cyan(`   üìÑ ${file}`));
                });

                const csvFiles = await this.getFilesInDirectory('CSV');
                if (csvFiles.length > 0) {
            console.log('');
            console.log(chalk.green('üìÅ CSV —Ñ–∞–π–ª—ã:'));
                csvFiles.forEach(file => {
                    console.log(chalk.cyan(`   üìä ${file}`));
                });
                }

                console.log('');
                console.log(chalk.blue('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...'));
                
                let totalCategories = 0;
                let totalProducts = 0;
                const categoryStats = [];

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π JSON —Ñ–∞–π–ª
                for (const file of jsonFiles) {
                    try {
                        const filePath = `JSON/${file}`;
                        const content = await fs.readFile(filePath, 'utf8');
                        const data = JSON.parse(content);

                        if (Array.isArray(data)) {
                            // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
                            const categoryName = file.replace('.json', '');
                            const productCount = data.length;
                            
                            categoryStats.push({
                                name: categoryName,
                                count: productCount,
                                file: file
                            });
                            
                            totalCategories++;
                            totalProducts += productCount;
                        } else if (typeof data === 'object') {
                            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                            Object.keys(data).forEach(categoryName => {
                                const categoryData = data[categoryName];
                                let productCount = 0;
                                
                                if (Array.isArray(categoryData)) {
                                    productCount = categoryData.length;
                                } else if (categoryData && typeof categoryData === 'object' && categoryData.products) {
                                    productCount = Array.isArray(categoryData.products) ? categoryData.products.length : 0;
                                }
                                
                                categoryStats.push({
                                    name: categoryName,
                                    count: productCount,
                                    file: file
                                });
                                
                                totalCategories++;
                                totalProducts += productCount;
                            });
                        }
                    } catch (error) {
                        console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}: ${error.message}`));
                    }
                }

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                categoryStats.sort((a, b) => b.count - a.count);

                console.log('');
                console.log(chalk.green('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:'));
                console.log('');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                console.log(chalk.cyan(`   –ù–∞–π–¥–µ–Ω–æ ${categoryStats.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`));
                console.log(chalk.yellow('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, Enter –¥–ª—è –≤—ã–±–æ—Ä–∞, q –¥–ª—è –≤—ã—Ö–æ–¥–∞'));
                console.log('');

                // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                const choices = categoryStats.map((stat, index) => {
                    const color = stat.count > 100 ? 'green' : stat.count > 50 ? 'yellow' : 'cyan';
                    const icon = stat.count === 0 ? '‚ùå' : stat.count > 100 ? 'üü¢' : stat.count > 50 ? 'üü°' : 'üîµ';
                    return {
                        name: `${icon} ${stat.name}: ${stat.count} —Ç–æ–≤–∞—Ä–æ–≤`,
                        value: index,
                        short: `${stat.name} (${stat.count})`
                    };
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
                choices.push(
                    {
                        name: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª',
                        value: 'save_empty',
                        short: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ'
                    },
                    {
                        name: '‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                        value: 'exit',
                        short: '–í—ã—Ö–æ–¥'
                    }
                );

                const { selectedCategory } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'selectedCategory',
                        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:',
                        choices: choices,
                        pageSize: 15 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    }
                ]);

                if (selectedCategory === 'save_empty') {
                    await this.saveEmptyCategories(categoryStats);
                } else if (selectedCategory !== 'exit') {
                    const selectedStat = categoryStats[selectedCategory];
                    console.log('');
                    console.log(chalk.blue(`üìã –î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${selectedStat.name}`));
                    console.log(chalk.cyan(`   üìÑ –§–∞–π–ª: ${selectedStat.file}`));
                    console.log(chalk.green(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedStat.count}`));
                    
                    if (selectedStat.count === 0) {
                        console.log(chalk.red(`   ‚ö†Ô∏è  –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤`));
            } else {
                        const color = selectedStat.count > 100 ? chalk.green : selectedStat.count > 50 ? chalk.yellow : chalk.cyan;
                        console.log(color(`   üìä –°—Ç–∞—Ç—É—Å: ${selectedStat.count > 100 ? '–û—Ç–ª–∏—á–Ω–æ' : selectedStat.count > 50 ? '–•–æ—Ä–æ—à–æ' : '–ù–æ—Ä–º–∞–ª—å–Ω–æ'}`));
                    }
                }

                console.log('');
                console.log(chalk.blue('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'));
                console.log(chalk.cyan(`   üìÅ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`));
                console.log(chalk.green(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`));
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å 0 —Ç–æ–≤–∞—Ä–æ–≤
                const emptyCategories = categoryStats.filter(stat => stat.count === 0).length;
                if (emptyCategories > 0) {
                    console.log(chalk.red(`   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å 0 —Ç–æ–≤–∞—Ä–æ–≤: ${emptyCategories}`));
                }
                
                if (totalCategories > 0) {
                    const avgProducts = Math.round(totalProducts / totalCategories);
                    console.log(chalk.yellow(`   üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${avgProducts}`));
                }
            }

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–æ–≤: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–∞–π–ª
    async saveEmptyCategories(categoryStats) {
        const emptyCategories = categoryStats.filter(stat => stat.count === 0);
        
        if (emptyCategories.length === 0) {
            console.log(chalk.green('‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'));
            return;
        }

        const { fileName, includeUrls } = await inquirer.prompt([
            {
                type: 'input',
                name: 'fileName',
                message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:',
                default: `empty_categories_${new Date().toISOString().slice(0, 10)}.txt`,
                validate: (input) => {
                    if (!input.trim()) {
                        return '–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
                    }
                    return true;
                }
            },
            {
                type: 'confirm',
                name: 'includeUrls',
                message: '–í–∫–ª—é—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?',
                default: true
            }
        ]);

        try {
            const fs = require('fs').promises;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            let categoryUrls = {};
            if (includeUrls) {
                console.log(chalk.blue('üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...'));
                categoryUrls = await this.getCategoryUrls(emptyCategories);
            }

            const content = [
                `# –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${emptyCategories.length} —à—Ç.)`,
                `# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`,
                `# –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∞–Ω–∞–ª–∏–∑–µ: ${categoryStats.length}`,
                includeUrls ? `# –í–∫–ª—é—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏` : `# –ë–µ–∑ —Å—Å—ã–ª–æ–∫`,
                '',
                ...emptyCategories.map(stat => {
                    const url = categoryUrls[stat.name];
                    if (includeUrls && url) {
                        return `${stat.name} (—Ñ–∞–π–ª: ${stat.file})\n${url}`;
                    } else {
                        return `${stat.name} (—Ñ–∞–π–ª: ${stat.file})`;
                    }
                })
            ].join('\n');

            const filePath = `tctgr/${fileName}`;
            await fs.writeFile(filePath, content, 'utf8');
            
            console.log(chalk.green(`‚úÖ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filePath}`));
            console.log(chalk.cyan(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${emptyCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`));
            
            if (includeUrls) {
                const foundUrls = Object.keys(categoryUrls).length;
                console.log(chalk.cyan(`üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${foundUrls} –∏–∑ ${emptyCategories.length}`));
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            console.log(chalk.yellow('üìã –ü–µ—Ä–≤—ã–µ 5 –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:'));
            emptyCategories.slice(0, 5).forEach((stat, index) => {
                const url = categoryUrls[stat.name];
                if (includeUrls && url) {
                    console.log(chalk.cyan(`   ${index + 1}. ${stat.name}`));
                    console.log(chalk.blue(`      üîó ${url}`));
                } else {
                    console.log(chalk.cyan(`   ${index + 1}. ${stat.name}`));
                }
            });
            
            if (emptyCategories.length > 5) {
                console.log(chalk.cyan(`   ... –∏ –µ—â–µ ${emptyCategories.length - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`));
            }

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async getCategoryUrls(emptyCategories) {
        const fs = require('fs').promises;
        const categoryUrls = {};

        try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            const content = await fs.readFile(this.selectedCategoriesFile, 'utf8');
            const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);

            // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryMap = {};
            const categoryDetails = {};
            
            lines.forEach(line => {
                if (line.includes('hotline.ua')) {
                    const categoryName = this.parser.extractPathFromUrl(line);
                    categoryMap[categoryName] = line;
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ URL
                    const urlParts = this.extractGroupAndCategory(line);
                    categoryDetails[categoryName] = {
                        url: line,
                        group: urlParts.group,
                        category: urlParts.category,
                        fullPath: urlParts.fullPath
                    };
                }
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            console.log(chalk.blue(`üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è ${emptyCategories.length} –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`));
            console.log(chalk.cyan(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª–µ: ${Object.keys(categoryMap).length}`));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏
            console.log(chalk.yellow('üìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–∞–π–ª–µ:'));
            Object.keys(categoryDetails).slice(0, 5).forEach(category => {
                const details = categoryDetails[category];
                console.log(chalk.cyan(`   - ${category} (–≥—Ä—É–ø–ø–∞: ${details.group}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${details.category})`));
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            console.log(chalk.yellow('üìã –ü—Ä–∏–º–µ—Ä—ã –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ JSON:'));
            emptyCategories.slice(0, 5).forEach(stat => {
                console.log(chalk.red(`   - ${stat.name}`));
            });

            // –ù–∞—Ö–æ–¥–∏–º URL –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            emptyCategories.forEach(stat => {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if (categoryMap[stat.name]) {
                    categoryUrls[stat.name] = categoryMap[stat.name];
                } else {
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
                    const statNameLower = stat.name.toLowerCase();
                    let bestMatch = null;
                    let bestScore = 0;
                    
                    for (const [categoryName, details] of Object.entries(categoryDetails)) {
                        const categoryNameLower = categoryName.toLowerCase();
                        const categoryLower = details.category.toLowerCase();
                        const groupLower = details.group.toLowerCase();
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        let score = 0;
                        
                        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (statNameLower === categoryLower) score += 100;
                        if (statNameLower === categoryNameLower) score += 100;
                        
                        // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (statNameLower.includes(categoryLower) || categoryLower.includes(statNameLower)) score += 50;
                        if (statNameLower.includes(categoryNameLower) || categoryNameLower.includes(statNameLower)) score += 50;
                        
                        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–µ
                        if (statNameLower.includes(groupLower) || groupLower.includes(statNameLower)) score += 30;
                        
                        // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if (this.normalizeCategoryName(statNameLower) === this.normalizeCategoryName(categoryLower)) score += 80;
                        if (this.normalizeCategoryName(statNameLower) === this.normalizeCategoryName(categoryNameLower)) score += 80;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if (score > bestScore) {
                            bestScore = score;
                            bestMatch = details.url;
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ—Ü–µ–Ω–∫–∞ > 30)
                    if (bestMatch && bestScore > 30) {
                        categoryUrls[stat.name] = bestMatch;
                        console.log(chalk.green(`üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "${stat.name}" (–æ—Ü–µ–Ω–∫–∞: ${bestScore})`));
                    }
                }
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const foundCount = Object.keys(categoryUrls).length;
            console.log(chalk.green(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${foundCount}`));
            
            if (foundCount > 0) {
                console.log(chalk.yellow('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:'));
                Object.entries(categoryUrls).slice(0, 3).forEach(([name, url]) => {
                    console.log(chalk.cyan(`   ${name} ‚Üí ${url}`));
                });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏
            const notFound = emptyCategories.filter(stat => !categoryUrls[stat.name]);
            if (notFound.length > 0) {
                console.log(chalk.red(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è ${notFound.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`));
                notFound.slice(0, 5).forEach(stat => {
                    console.log(chalk.red(`   - ${stat.name}`));
                });
                if (notFound.length > 5) {
                    console.log(chalk.red(`   ... –∏ –µ—â–µ ${notFound.length - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`));
                }
                
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                const { manualMapping } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'manualMapping',
                        message: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                        default: false
                    }
                ]);
                
                if (manualMapping) {
                    await this.manualCategoryMapping(notFound, categoryMap, categoryUrls);
                }
            }

        } catch (error) {
            console.log(chalk.yellow(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏: ${error.message}`));
        }

        return categoryUrls;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL
    extractGroupAndCategory(url) {
        try {
            const urlObj = new URL(url);
            const pathParts = urlObj.pathname.split('/').filter(part => part.length > 0);
            
            // –£–±–∏—Ä–∞–µ–º 'ua' –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
            const cleanParts = pathParts[0] === 'ua' ? pathParts.slice(1) : pathParts;
            
            if (cleanParts.length >= 2) {
                return {
                    group: cleanParts[0],           // mobile, computer, etc.
                    category: cleanParts[1],        // aksessuary-dlya-zaryadki, etc.
                    fullPath: cleanParts.join('/')  // mobile/aksessuary-dlya-zaryadki
                };
            } else if (cleanParts.length === 1) {
                return {
                    group: cleanParts[0],
                    category: cleanParts[0],
                    fullPath: cleanParts[0]
                };
            } else {
                return {
                    group: 'unknown',
                    category: 'unknown',
                    fullPath: 'unknown'
                };
            }
        } catch (error) {
            return {
                group: 'error',
                category: 'error',
                fullPath: 'error'
            };
        }
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    normalizeCategoryName(name) {
        return name
            .replace(/[^a-z–∞-—è0-9]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
            .replace(/—Ç–µ–ª–µ—Ñ–æ–Ω/g, '—Ç–µ–ª–µ—Ñ–æ–Ω—ã')
            .replace(/—Å–º–∞—Ä—Ç—Ñ–æ–Ω/g, '—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã')
            .replace(/–Ω–æ—É—Ç–±—É–∫/g, '–Ω–æ—É—Ç–±—É–∫–∏')
            .replace(/–∫–æ–º–ø—å—é—Ç–µ—Ä/g, '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã')
            .replace(/–ø–ª–∞–Ω—à–µ—Ç/g, '–ø–ª–∞–Ω—à–µ—Ç—ã')
            .replace(/–º–æ–Ω–∏—Ç–æ—Ä/g, '–º–æ–Ω–∏—Ç–æ—Ä—ã');
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    async parseSelectedFile() {
        this.showHeader();
        console.log(chalk.blue('üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'));
        console.log(chalk.cyan(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: ${this.selectedCategoriesFile}`));
        console.log('');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const fs = require('fs').promises;
            let categories;
            
            try {
                const content = await fs.readFile(this.selectedCategoriesFile, 'utf8');
                categories = content
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0 && !line.startsWith('#'))
                    .filter(line => line.includes('hotline.ua'));
            } catch (error) {
                console.log(chalk.red(`‚ùå –§–∞–π–ª ${this.selectedCategoriesFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`));
                await this.waitForEnter();
                return;
            }

            if (categories.length === 0) {
                console.log(chalk.red('‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL!'));
                await this.waitForEnter();
                return;
            }

            console.log(chalk.green(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`));
            categories.forEach((url, index) => {
                const categoryName = this.parser.extractPathFromUrl(url);
                console.log(chalk.cyan(`   ${index + 1}. ${categoryName}`));
            });

            console.log('');
            const { confirm } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'confirm',
                    message: '–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?',
                    default: true
                }
            ]);

            if (!confirm) {
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const spinner = ora('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...').start();
            
            const results = await this.parser.parseAllCategories(
                categories, 
                this.config.saveProgressively, 
                this.config.batchSize, 
                this.config.autoGetTokens
            );

            spinner.succeed('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showParseResults(results);

        } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }

        await this.waitForEnter();
    }

    // –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    async manualCategoryMapping(notFound, categoryMap, categoryUrls) {
        console.log(chalk.blue('üîß –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'));
        console.log(chalk.yellow('–î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ'));
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        const availableCategories = Object.keys(categoryMap).map(cat => {
            const urlParts = this.extractGroupAndCategory(categoryMap[cat]);
            return {
                name: `${cat} (${urlParts.group}/${urlParts.category})`,
                value: cat,
                group: urlParts.group,
                category: urlParts.category
            };
        });
        
        for (let i = 0; i < Math.min(notFound.length, 10); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            const stat = notFound[i];
            
            console.log(chalk.cyan(`\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${i + 1}/${Math.min(notFound.length, 10)}: ${stat.name}`));
            
            const choices = [
                ...availableCategories,
                { name: '‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', value: 'skip' },
                { name: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ', value: 'stop' }
            ];
            
            const { selectedCategory } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'selectedCategory',
                    message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                    choices: choices,
                    pageSize: 15
                }
            ]);
            
            if (selectedCategory === 'stop') {
                break;
            } else if (selectedCategory === 'skip') {
                continue;
            } else {
                categoryUrls[stat.name] = categoryMap[selectedCategory];
                const selectedDetails = availableCategories.find(cat => cat.value === selectedCategory);
                console.log(chalk.green(`‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stat.name} ‚Üí ${selectedCategory} (${selectedDetails.group}/${selectedDetails.category})`));
            }
        }
        
        console.log(chalk.green(`\n‚úÖ –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`));
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    async getAllFilesInDirectory(dir, baseDir = '') {
        const fs = require('fs').promises;
        const path = require('path');
        const allFiles = [];

        try {
            const items = await fs.readdir(dir);
            
            for (const item of items) {
                const fullPath = path.join(dir, item);
                const relativePath = path.join(baseDir, item);
                const stat = await fs.stat(fullPath);
                
                if (stat.isDirectory()) {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–µ
                    const subFiles = await this.getAllFilesInDirectory(fullPath, relativePath);
                    allFiles.push(...subFiles);
                } else if (stat.isFile()) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                    allFiles.push(relativePath);
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º
        }

        return allFiles;
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
    groupFilesByFolder(files) {
        const grouped = { root: [] };
        
        files.forEach(file => {
            const pathParts = file.split(/[\/\\]/);
            
            if (pathParts.length === 1) {
                // –§–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
                grouped.root.push(file);
            } else {
                // –§–∞–π–ª –≤ –ø–æ–¥–ø–∞–ø–∫–µ
                const folder = pathParts[0];
                const fileName = pathParts[pathParts.length - 1];
                
                if (!grouped[folder]) {
                    grouped[folder] = [];
                }
                grouped[folder].push(fileName);
            }
        });
        
        return grouped;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async getFilesInDirectory(dir) {
        try {
            const fs = require('fs').promises;
            const files = await fs.readdir(dir);
            return files.filter(file => file.endsWith('.json') || file.endsWith('.csv'));
        } catch (error) {
            return [];
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    showParseResults(results) {
        console.log('');
        console.log(chalk.green('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:'));
        console.log('');

        let totalProducts = 0;
        let successCount = 0;
        let errorCount = 0;

        Object.keys(results).forEach(categoryName => {
            const result = results[categoryName];
            if (result.error) {
                console.log(chalk.red(`‚ùå ${categoryName}: ${result.error}`));
                errorCount++;
            } else {
                console.log(chalk.green(`‚úÖ ${categoryName}: ${result.count} —Ç–æ–≤–∞—Ä–æ–≤`));
                totalProducts += result.count;
                successCount++;
            }
        });

        console.log('');
        console.log(chalk.blue('üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'));
        console.log(chalk.cyan(`   –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${successCount}`));
        console.log(chalk.red(`   –û—à–∏–±–æ–∫: ${errorCount}`));
        console.log(chalk.green(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`));
    }

    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    showProductStats(products) {
        console.log('');
        console.log(chalk.blue('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:'));
        console.log(chalk.cyan(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`));
        
        if (products.length > 0) {
            const prices = products.filter(p => p.minPrice).map(p => p.minPrice);
            if (prices.length > 0) {
                const minPrice = Math.min(...prices);
                const maxPrice = Math.max(...prices);
                const avgPrice = Math.round(prices.reduce((a, b) => a + b, 0) / prices.length);
                
                console.log(chalk.cyan(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice} –≥—Ä–Ω`));
                console.log(chalk.cyan(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${maxPrice} –≥—Ä–Ω`));
                console.log(chalk.cyan(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice} –≥—Ä–Ω`));
            }
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    showPerformanceResults(results) {
        console.log('');
        console.log(chalk.green('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:'));
        console.log('');

        results.results.forEach(result => {
            const color = result.speed > 10 ? chalk.green : result.speed > 5 ? chalk.yellow : chalk.red;
            console.log(color(`   –ë–∞—Ç—á ${result.batchSize}: ${result.duration.toFixed(2)}—Å, ${result.productsCount} —Ç–æ–≤–∞—Ä–æ–≤, ${result.speed.toFixed(1)} —Ç–æ–≤–∞—Ä–æ–≤/—Å`));
        });

        console.log('');
        console.log(chalk.blue(`üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${results.optimal.batchSize} (${results.optimal.speed.toFixed(1)} —Ç–æ–≤–∞—Ä–æ–≤/—Å)`));
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è Enter
    async waitForEnter() {
        await inquirer.prompt([
            {
                type: 'input',
                name: 'enter',
                message: '–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'
            }
        ]);
    }

    // –í—ã—Ö–æ–¥
    exit() {
        console.log(chalk.cyan('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
        process.exit(0);
    }

    // –ó–∞–ø—É—Å–∫ CLI
    async run() {
        while (true) {
            this.showHeader();
            await this.showMainMenu();
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI
if (require.main === module) {
    const cli = new HotlineCLI();
    cli.run().catch(console.error);
}

module.exports = HotlineCLI; 