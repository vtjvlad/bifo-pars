const HotlineFiltersParser = require('./hotline-filters-parser');

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function exampleUsage() {
    const parser = new HotlineFiltersParser();
    
    console.log('üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ Hotline.ua\n');
    
    try {
        // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('=== –ü—Ä–∏–º–µ—Ä 1: –§–∏–ª—å—Ç—Ä—ã –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===');
        const singleCategoryUrl = 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/';
        const sectionId = 386;
        
        const filters = await parser.getCategoryFilters(sectionId, singleCategoryUrl);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filters.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterTypes = {};
        filters.forEach(filter => {
            filterTypes[filter.type] = (filterTypes[filter.type] || 0) + 1;
        });
        console.log('üìä –¢–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filterTypes);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∏–ª—å—Ç—Ä–∞
        console.log('\nüìã –ü–µ—Ä–≤—ã–µ 3 —Ñ–∏–ª—å—Ç—Ä–∞:');
        filters.slice(0, 3).forEach((filter, index) => {
            console.log(`${index + 1}. ${filter.title} (${filter.type})`);
            if (filter.values && filter.values.length > 0) {
                console.log(`   –ó–Ω–∞—á–µ–Ω–∏–π: ${filter.values.length}`);
                console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${filter.values.slice(0, 3).map(v => v.title).join(', ')}`);
            }
        });
        
        // –ü—Ä–∏–º–µ—Ä 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
        console.log('\n=== –ü—Ä–∏–º–µ—Ä 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ ===');
        
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É
        const checkboxFilters = parser.filterByType(filters, 'checkbox');
        const rangeFilters = parser.filterByType(filters, 'range');
        console.log(`üîò Checkbox —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${checkboxFilters.length}`);
        console.log(`üìè Range —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${rangeFilters.length}`);
        
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const memoryFilters = parser.searchByName(filters, '–ø–∞–º—è—Ç—å');
        const priceFilters = parser.searchByName(filters, '—Ü–µ–Ω–∞');
        console.log(`üîç –§–∏–ª—å—Ç—Ä–æ–≤ —Å "–ø–∞–º—è—Ç—å": ${memoryFilters.length}`);
        console.log(`üí∞ –§–∏–ª—å—Ç—Ä–æ–≤ —Å "—Ü–µ–Ω–∞": ${priceFilters.length}`);
        
        // –ü—Ä–∏–º–µ—Ä 3: –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
        console.log('\n=== –ü—Ä–∏–º–µ—Ä 3: –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===');
        
        const filterWithMostValues = filters.reduce((max, filter) => {
            const valueCount = filter.values ? filter.values.length : 0;
            return valueCount > (max.values ? max.values.length : 0) ? filter : max;
        }, {});
        
        if (filterWithMostValues.values) {
            console.log(`üìä –§–∏–ª—å—Ç—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π: ${filterWithMostValues.title}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${filterWithMostValues.values.length}`);
            console.log(`   –¢–∏–ø: ${filterWithMostValues.type}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            const topValues = filterWithMostValues.values
                .sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
                .slice(0, 5);
            
            console.log('   –¢–æ–ø-5 –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:');
            topValues.forEach((value, index) => {
                console.log(`     ${index + 1}. ${value.title} (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${value.popularity || 0})`);
            });
        }
        
        // –ü—Ä–∏–º–µ—Ä 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log('\n=== –ü—Ä–∏–º–µ—Ä 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===');
        
        const categoryName = parser.extractPathFromUrl(singleCategoryUrl);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        const jsonFilename = `JSON/example-filters-${categoryName.replace(/[^a-zA-Z0-9]/g, '-')}.json`;
        await parser.saveToFile(filters, jsonFilename);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        const csvFilename = `CSV/example-filters-${categoryName.replace(/[^a-zA-Z0-9]/g, '-')}.csv`;
        await parser.saveToCSV(filters, csvFilename);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON –∏ CSV —Ñ–∞–π–ª—ã');
        
        // –ü—Ä–∏–º–µ—Ä 5: –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        console.log('\n=== –ü—Ä–∏–º–µ—Ä 5: –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ===');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±—Ä–∞–Ω –±—Ä–µ–Ω–¥ Apple)
        const selectedValueIds = [313025]; // ID –¥–ª—è Apple (–ø—Ä–∏–º–µ—Ä)
        const filtersWithSelection = await parser.getCategoryFilters(
            sectionId, 
            singleCategoryUrl, 
            selectedValueIds, 
            [], // excludedValueIds
            null, // selectedMinPrice
            null, // selectedMaxPrice
            null  // searchPhrase
        );
        
        console.log(`üìä –§–∏–ª—å—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±—Ä–µ–Ω–¥–æ–º Apple: ${filtersWithSelection.length}`);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        const originalValueCount = filters.reduce((sum, filter) => sum + (filter.values ? filter.values.length : 0), 0);
        const selectedValueCount = filtersWithSelection.reduce((sum, filter) => sum + (filter.values ? filter.values.length : 0), 0);
        
        console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${originalValueCount}`);
        console.log(`üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: ${selectedValueCount}`);
        console.log(`üîç –†–∞–∑–Ω–∏—Ü–∞: ${originalValueCount - selectedValueCount} –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ`);
        
        console.log('\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ:', error.message);
    }
}

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async function multipleCategoriesExample() {
    const parser = new HotlineFiltersParser();
    
    console.log('\nüîÑ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const testCategories = [
            {
                url: 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/',
                sectionId: 386
            },
            {
                url: 'https://hotline.ua/computer/noutbuki/',
                sectionId: 387
            }
        ];
        
        console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${testCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...`);
        
        const results = await parser.getAllCategoryFilters(testCategories, true, true);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        Object.keys(results).forEach(categoryName => {
            const result = results[categoryName];
            if (result.error) {
                console.log(`‚ùå ${categoryName}: ${result.error}`);
            } else {
                console.log(`‚úÖ ${categoryName}: ${result.filtersCount} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const filterTypes = {};
                result.filters.forEach(filter => {
                    filterTypes[filter.type] = (filterTypes[filter.type] || 0) + 1;
                });
                console.log(`   –¢–∏–ø—ã: ${Object.entries(filterTypes).map(([type, count]) => `${type}:${count}`).join(', ')}`);
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
async function runExamples() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n');
    
    await exampleUsage();
    await multipleCategoriesExample();
    
    console.log('\n‚ú® –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runExamples();
}

module.exports = {
    exampleUsage,
    multipleCategoriesExample,
    runExamples
}; 