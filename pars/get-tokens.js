const puppeteer = require('puppeteer');
const fs = require('fs').promises;

class TokenExtractor {
    constructor() {
        this.url = 'https://hotline.ua/ua/mobile/mobilnye-telefony-i-smartfony/';
        this.browser = null;
        this.page = null;
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ]
        });

        this.page = await this.browser.newPage();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        await this.page.setViewport({ width: 1920, height: 1080 });

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        await this.page.setRequestInterception(true);
        
        const requests = [];
        this.page.on('request', request => {
            requests.push({
                url: request.url(),
                headers: request.headers(),
                method: request.method()
            });
            request.continue();
        });

        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        return requests;
    }

    async extractTokens() {
        try {
            console.log(`üì° –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${this.url}`);
            
            const requests = await this.init();
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await this.page.goto(this.url, { 
                waitUntil: 'networkidle2',
                timeout: 30000 
            });

            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            await new Promise(resolve => setTimeout(resolve, 5000));

            // –ò—â–µ–º GraphQL –∑–∞–ø—Ä–æ—Å—ã
            const graphqlRequests = requests.filter(req => 
                req.url.includes('graphql') || 
                req.url.includes('api') ||
                req.headers['x-token'] ||
                req.headers['x-request-id']
            );

            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${graphqlRequests.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤`);

            let tokens = {
                'x-token': null,
                'x-request-id': null
            };

            // –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for (const req of graphqlRequests) {
                if (req.headers['x-token']) {
                    tokens['x-token'] = req.headers['x-token'];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-token: ${req.headers['x-token']}`);
                }
                if (req.headers['x-request-id']) {
                    tokens['x-request-id'] = req.headers['x-request-id'];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-request-id: ${req.headers['x-request-id']}`);
                }
            }

            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Ö –≤ JavaScript –∫–æ–¥–µ
            if (!tokens['x-token'] || !tokens['x-request-id']) {
                console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ JavaScript –∫–æ–¥–µ...');
                
                const pageContent = await this.page.content();
                
                // –ò—â–µ–º x-token –≤ –∫–æ–¥–µ
                const xTokenMatch = pageContent.match(/x-token["\s]*:["\s]*["']([^"']+)["']/i);
                if (xTokenMatch) {
                    tokens['x-token'] = xTokenMatch[1];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-token –≤ –∫–æ–¥–µ: ${xTokenMatch[1]}`);
                }

                // –ò—â–µ–º x-request-id –≤ –∫–æ–¥–µ
                const xRequestIdMatch = pageContent.match(/x-request-id["\s]*:["\s]*["']([^"']+)["']/i);
                if (xRequestIdMatch) {
                    tokens['x-request-id'] = xRequestIdMatch[1];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-request-id –≤ –∫–æ–¥–µ: ${xRequestIdMatch[1]}`);
                }
            }

            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
            if (!tokens['x-token'] || !tokens['x-request-id']) {
                console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...');
                
                const jsTokens = await this.page.evaluate(() => {
                    const tokens = {
                        'x-token': null,
                        'x-request-id': null
                    };

                    // –ò—â–µ–º –≤ localStorage
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        if (key && key.toLowerCase().includes('token')) {
                            tokens['x-token'] = localStorage.getItem(key);
                            break;
                        }
                    }

                    // –ò—â–µ–º –≤ sessionStorage
                    for (let i = 0; i < sessionStorage.length; i++) {
                        const key = sessionStorage.key(i);
                        if (key && key.toLowerCase().includes('token')) {
                            tokens['x-token'] = sessionStorage.getItem(key);
                            break;
                        }
                    }

                    // –ò—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    if (window.token) tokens['x-token'] = window.token;
                    if (window.xToken) tokens['x-token'] = window.xToken;
                    if (window.requestId) tokens['x-request-id'] = window.requestId;
                    if (window.xRequestId) tokens['x-request-id'] = window.xRequestId;

                    return tokens;
                });

                if (jsTokens['x-token']) {
                    tokens['x-token'] = jsTokens['x-token'];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-token —á–µ—Ä–µ–∑ JavaScript: ${jsTokens['x-token']}`);
                }
                if (jsTokens['x-request-id']) {
                    tokens['x-request-id'] = jsTokens['x-request-id'];
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω x-request-id —á–µ—Ä–µ–∑ JavaScript: ${jsTokens['x-request-id']}`);
                }
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º x-request-id –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            if (!tokens['x-request-id']) {
                tokens['x-request-id'] = this.generateRequestId();
                console.log(`üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π x-request-id: ${tokens['x-request-id']}`);
            }

            return tokens;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
            throw error;
        } finally {
            if (this.browser) {
                await this.browser.close();
                console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ x-request-id (–ø—Ä–∏–º–µ—Ä)
    generateRequestId() {
        return `req-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
    }

    async saveTokens(tokens, filename = 'tokens.json') {
        try {
            await fs.writeFile(filename, JSON.stringify(tokens, null, 2), 'utf8');
            console.log(`üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
            throw error;
        }
    }

    async updateHotlineParser(tokens) {
        try {
            console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ hotline-parser.js...');
            
            const parserContent = await fs.readFile('hotline-parser.js', 'utf8');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º x-token
            let updatedContent = parserContent.replace(
                /'x-token':\s*'[^']*'('?)/,
                `'x-token': '${tokens['x-token'] || '55779a23-508b-4e66-a2e1-6a19e34a48d7'}`
            );

            // let updatedContent = parserContent.replace(
            //     /'x-token':\s*"[^"]*"("?)/,
            //     (_, comma) => `'x-token': '${tokens['x-token'] || '55779a23-508b-4e66-a2e1-6a19e34a48d7'}'${comma || ','}`
            //   );
              
            
            // –û–±–Ω–æ–≤–ª—è–µ–º x-request-id
            updatedContent = updatedContent.replace(
                /'x-request-id':\s*this\.generateRequestId\(\)/,
                `'x-request-id': '${tokens['x-request-id'] || this.generateRequestId()}'`
            );
            
            await fs.writeFile('hotline-parser.js', updatedContent, 'utf8');
            console.log('‚úÖ hotline-parser.js –æ–±–Ω–æ–≤–ª–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ hotline-parser.js:', error.message);
            throw error;
        }
    }
}

async function main() {
    const extractor = new TokenExtractor();
    
    try {
        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...');
        
        const tokens = await extractor.extractTokens();
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('='.repeat(50));
        console.log(`üîë x-token: ${tokens['x-token'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        console.log(`üÜî x-request-id: ${tokens['x-request-id'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        console.log('='.repeat(50));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
        await extractor.saveTokens(tokens);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º hotline-parser.js
        await extractor.updateHotlineParser(tokens);
        
        console.log('\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = TokenExtractor;