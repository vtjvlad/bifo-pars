const HotlineFiltersParser = require('./hotline-filters-parser');

async function testFiltersParser() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ Hotline.ua\n');
    
    const parser = new HotlineFiltersParser();
    
    try {
        // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        console.log('=== –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ===');
        
        const categoryUrl = 'https://hotline.ua/mobile/mobilnye-telefony-i-smartfony/';
        const sectionId = 386;
        
        console.log(`üì± –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è: ${categoryUrl}`);
        console.log(`üÜî Section ID: ${sectionId}`);
        
        const filters = await parser.getCategoryFilters(sectionId, categoryUrl);
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${filters.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n`);
        
        // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('=== –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ===');
        
        if (filters.length > 0) {
            const firstFilter = filters[0];
            console.log('üìã –ü–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:');
            console.log(`   ID: ${firstFilter._id}`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${firstFilter.title}`);
            console.log(`   –¢–∏–ø: ${firstFilter.type}`);
            console.log(`   –í–µ—Å: ${firstFilter.weight}`);
            console.log(`   –ü—É–±–ª–∏—á–Ω—ã–π: ${firstFilter.isPublic}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${firstFilter.values ? firstFilter.values.length : 0}`);
            
            if (firstFilter.values && firstFilter.values.length > 0) {
                const firstValue = firstFilter.values[0];
                console.log('   –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:');
                console.log(`     ID: ${firstValue._id}`);
                console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${firstValue.title}`);
                console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${firstValue.productsCount}`);
                console.log(`     –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${firstValue.popularity}`);
            }
        }
        
        // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        console.log('\n=== –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===');
        
        const filterTypes = {};
        filters.forEach(filter => {
            filterTypes[filter.type] = (filterTypes[filter.type] || 0) + 1;
        });
        
        console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:');
        Object.entries(filterTypes).forEach(([type, count]) => {
            console.log(`   ${type}: ${count} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
        });
        
        // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        console.log('\n=== –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===');
        
        const checkboxFilters = parser.filterByType(filters, 'checkbox');
        const rangeFilters = parser.filterByType(filters, 'range');
        
        console.log(`üîò Checkbox —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${checkboxFilters.length}`);
        console.log(`üìè Range —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${rangeFilters.length}`);
        
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const memoryFilters = parser.searchByName(filters, '–ø–∞–º—è—Ç—å');
        const priceFilters = parser.searchByName(filters, '—Ü–µ–Ω–∞');
        
        console.log(`üîç –§–∏–ª—å—Ç—Ä–æ–≤ —Å "–ø–∞–º—è—Ç—å": ${memoryFilters.length}`);
        console.log(`üí∞ –§–∏–ª—å—Ç—Ä–æ–≤ —Å "—Ü–µ–Ω–∞": ${priceFilters.length}`);
        
        // –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log('\n=== –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===');
        
        const categoryName = parser.extractPathFromUrl(categoryUrl);
        const jsonFilename = `JSON/test-filters-${categoryName.replace(/[^a-zA-Z0-9]/g, '-')}.json`;
        const csvFilename = `CSV/test-filters-${categoryName.replace(/[^a-zA-Z0-9]/g, '-')}.csv`;
        
        await parser.saveToFile(filters, jsonFilename);
        await parser.saveToCSV(filters, csvFilename);
        
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`);
        console.log(`   JSON: ${jsonFilename}`);
        console.log(`   CSV: ${csvFilename}`);
        
        // –¢–µ—Å—Ç 6: –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        console.log('\n=== –¢–µ—Å—Ç 6: –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ===');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—Ä–µ–Ω–¥ Apple)
        const selectedValueIds = [313025]; // ID –¥–ª—è Apple
        
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (ID: ${selectedValueIds[0]})...`);
        
        const filtersWithSelection = await parser.getCategoryFilters(
            sectionId,
            categoryUrl,
            selectedValueIds,
            [], // excludedValueIds
            null, // selectedMinPrice
            null, // selectedMaxPrice
            null  // searchPhrase
        );
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filtersWithSelection.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º`);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        const originalValueCount = filters.reduce((sum, filter) => 
            sum + (filter.values ? filter.values.length : 0), 0);
        const selectedValueCount = filtersWithSelection.reduce((sum, filter) => 
            sum + (filter.values ? filter.values.length : 0), 0);
        
        console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${originalValueCount}`);
        console.log(`üìâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: ${selectedValueCount}`);
        console.log(`üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${originalValueCount - selectedValueCount}`);
        
        // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log('\n=== –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ===');
        
        const stats = parser.requestStats;
        const successRate = (stats.successfulRequests / stats.totalRequests * 100).toFixed(1);
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}`);
        console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulRequests}`);
        console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.failedRequests}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
        
        if (error.response) {
            console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
            console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(error.response.data, null, 2));
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testFiltersParser();
}

module.exports = { testFiltersParser }; 