const mongoose = require('mongoose');
const Product = require('./models/Product.js');
const Filter = require('./models/Filter.js');
require('dotenv').config();

class FiltersStreamProcessor {
    constructor() {
        this.stats = {
            totalProducts: 0,
            processedProducts: 0,
            totalSections: 0,
            totalFilters: 0,
            savedFilters: 0,
            errors: 0,
            sectionsProcessed: new Set()
        };
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async connectToDatabase() {
        try {
            await mongoose.connect(process.env.MONGO_URI);
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
            throw error;
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async disconnectFromDatabase() {
        try {
            await mongoose.disconnect();
            console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB:', error.message);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    async clearExistingFilters() {
        try {
            const count = await Filter.countDocuments();
            if (count > 0) {
                console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
                const result = await Filter.deleteMany({});
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
            } else {
                console.log('üì≠ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error.message);
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ productValues
    extractFiltersFromProductValues(productValues) {
        const filters = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ title

        if (!productValues || typeof productValues !== 'object') {
            return filters;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ productValues
        Object.keys(productValues).forEach(key => {
            const value = productValues[key];
            
            if (value && value.edges && Array.isArray(value.edges)) {
                value.edges.forEach(edge => {
                    if (edge && edge.node) {
                        const { title, value: nodeValue } = edge.node;
                        
                        if (title && nodeValue) {
                            // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Å —Ç–∞–∫–∏–º title —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            if (filters.has(title)) {
                                const existingFilter = filters.get(title);
                                if (!existingFilter.values.includes(nodeValue)) {
                                    existingFilter.values.push(nodeValue);
                                }
                            } else {
                                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                                filters.set(title, {
                                    title: title,
                                    values: [nodeValue]
                                });
                            }
                        }
                    }
                });
            }
        });

        return filters;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö sectionId
    async getUniqueSectionIds() {
        try {
            const sectionIds = await Product.distinct('section._id', {
                'section._id': { $exists: true },
                productValues: { $exists: true }
            });
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sectionIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π`);
            return sectionIds.sort((a, b) => a - b);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π:', error.message);
            throw error;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏
    async processSection(sectionId) {
        try {
            console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é ${sectionId}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
            const productCount = await Product.countDocuments({
                'section._id': sectionId,
                productValues: { $exists: true }
            });
            
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${productCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ ${sectionId}`);

            if (productCount === 0) {
                console.log(`‚ö†Ô∏è –°–µ–∫—Ü–∏—è ${sectionId}: –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
            const sectionFilters = new Map();
            let processedCount = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏
            const batchSize = 100;
            let skip = 0;

            while (skip < productCount) {
                const products = await Product.find({
                    'section._id': sectionId,
                    productValues: { $exists: true }
                })
                .select('productValues')
                .skip(skip)
                .limit(batchSize)
                .lean();

                for (const product of products) {
                    this.stats.processedProducts++;
                    processedCount++;
                    
                    if (product.productValues) {
                        const productFilters = this.extractFiltersFromProductValues(product.productValues);
                        
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –æ–±—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–µ–∫—Ü–∏–∏
                        productFilters.forEach((filter, title) => {
                            if (sectionFilters.has(title)) {
                                const existingFilter = sectionFilters.get(title);
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                filter.values.forEach(value => {
                                    if (!existingFilter.values.includes(value)) {
                                        existingFilter.values.push(value);
                                    }
                                });
                            } else {
                                sectionFilters.set(title, filter);
                            }
                        });
                    }
                }

                skip += batchSize;
                console.log(`üìä –°–µ–∫—Ü–∏—è ${sectionId}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}/${productCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const filtersToSave = [];
            sectionFilters.forEach((filter, title) => {
                filtersToSave.push({
                    sectionId: sectionId,
                    node: {
                        filter: title,
                        values: filter.values
                    }
                });
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.saveFiltersToDatabase(filtersToSave, sectionId);
            
            this.stats.sectionsProcessed.add(sectionId);
            this.stats.totalSections++;
            console.log(`‚úÖ –°–µ–∫—Ü–∏—è ${sectionId}: —Å–æ–∑–¥–∞–Ω–æ ${filtersToSave.length} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∫—Ü–∏–∏ ${sectionId}:`, error.message);
            this.stats.errors++;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveFiltersToDatabase(filters, sectionId) {
        try {
            for (const filterData of filters) {
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
                const filterId = `${sectionId}_${filterData.node.filter}`;
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π
                const filterObject = {
                    _id: filterId,
                    title: filterData.node.filter,
                    type: 'checkbox', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    sectionId: sectionId,
                    values: filterData.node.values.map((value, index) => ({
                        _id: `${filterId}_value_${index}`,
                        title: value,
                        isPublic: true,
                        productsCount: 0,
                        totalProductsCount: 0,
                        popularity: 0,
                        __typename: 'FilterValue'
                    })),
                    popularity: 0,
                    isPublic: true,
                    isWrappable: false,
                    isExcludable: false,
                    useValuesSearch: false,
                    __typename: 'Filter'
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä
                const existingFilter = await Filter.findById(filterId);
                
                if (existingFilter) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä
                    await Filter.findByIdAndUpdate(filterId, filterObject, { new: true });
                    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterData.node.filter} (${filterId})`);
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                    const newFilter = new Filter(filterObject);
                    await newFilter.save();
                    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: ${filterData.node.filter} (${filterId})`);
                }

                this.stats.savedFilters++;
            }

            this.stats.totalFilters += filters.length;
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${sectionId}:`, error.message);
            this.stats.errors++;
            return false;
        }
    }

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    printStats() {
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:');
        console.log(`üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.stats.totalProducts}`);
        console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.stats.processedProducts}`);
        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–∫—Ü–∏–π: ${this.stats.totalSections}`);
        console.log(`üéØ –°–æ–∑–¥–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${this.stats.totalFilters}`);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${this.stats.savedFilters}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
        
        if (this.stats.sectionsProcessed.size > 0) {
            console.log('\nüìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:');
            Array.from(this.stats.sectionsProcessed).sort((a, b) => a - b).forEach(sectionId => {
                console.log(`   - ${sectionId}`);
            });
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async processFilters(clearExisting = false) {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            this.stats.totalProducts = await Product.countDocuments();
            console.log(`üìà –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${this.stats.totalProducts}`);
            
            if (clearExisting) {
                await this.clearExistingFilters();
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            const sectionIds = await this.getUniqueSectionIds();

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
            for (const sectionId of sectionIds) {
                await this.processSection(sectionId);
            }

            this.printStats();
            
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error.message);
            throw error;
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const processor = new FiltersStreamProcessor();
    
    try {
        await processor.connectToDatabase();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
        await processor.processFilters(false);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await processor.disconnectFromDatabase();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = FiltersStreamProcessor; 