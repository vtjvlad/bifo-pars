const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

class FiltersAPITester {
    constructor() {
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            errors: []
        };
    }

    async testEndpoint(endpoint, description, expectedStatus = 200) {
        try {
            console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${description}`);
            const response = await axios.get(`${BASE_URL}${endpoint}`);
            
            if (response.status === expectedStatus) {
                console.log(`‚úÖ –£—Å–ø–µ—Ö: ${description}`);
                this.results.passed++;
                return true;
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${description} (—Å—Ç–∞—Ç—É—Å ${response.status}, –æ–∂–∏–¥–∞–ª—Å—è ${expectedStatus})`);
                this.results.failed++;
                return false;
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${description} - ${error.message}`);
            this.results.failed++;
            this.results.errors.push({
                endpoint,
                description,
                error: error.message
            });
            return false;
        } finally {
            this.results.total++;
        }
    }

    async runTests() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–∏–ª—å—Ç—Ä–æ–≤...\n');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
        await this.testEndpoint('/filters', '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        await this.testEndpoint('/filters?limit=5', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º');
        await this.testEndpoint('/filters?page=1&limit=10', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        await this.testEndpoint('/filters?sectionId=386', '–§–∏–ª—å—Ç—Ä—ã –ø–æ section ID');
        await this.testEndpoint('/filters?type=checkbox', '–§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É');
        await this.testEndpoint('/filters?search=—Ü–µ–Ω–∞', '–ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints
        await this.testEndpoint('/filters/types', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        await this.testEndpoint('/filters/sections', '–ü–æ–ª—É—á–µ–Ω–∏–µ section ID');
        await this.testEndpoint('/filters/stats', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ section ID
        await this.testEndpoint('/filters/section/386', '–§–∏–ª—å—Ç—Ä—ã –¥–ª—è section 386');
        await this.testEndpoint('/filters/section/387', '–§–∏–ª—å—Ç—Ä—ã –¥–ª—è section 387');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await this.testEndpoint('/filters/category/mobilnye-telefony-i-smartfony', '–§–∏–ª—å—Ç—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        await this.testEndpoint('/filters/nonexistent', '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä', 404);
        await this.testEndpoint('/filters/section/999999', '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π section', 200);

        this.printResults();
    }

    printResults() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.total}`);
        console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${this.results.passed}`);
        console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.results.failed}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((this.results.passed / this.results.total) * 100).toFixed(1)}%`);

        if (this.results.errors.length > 0) {
            console.log('\n‚ùå –û—à–∏–±–∫–∏:');
            this.results.errors.forEach(error => {
                console.log(`   ${error.description}: ${error.error}`);
            });
        }
    }

    async testSpecificFilter() {
        try {
            console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const filtersResponse = await axios.get(`${BASE_URL}/filters?limit=1`);
            
            if (filtersResponse.data.data && filtersResponse.data.data.length > 0) {
                const filterId = filtersResponse.data.data[0]._id;
                console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Å ID: ${filterId}`);
                
                const filterResponse = await axios.get(`${BASE_URL}/filters/${filterId}`);
                console.log(`‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ–ª—É—á–µ–Ω: ${filterResponse.data.data.title}`);
                
                return true;
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                return false;
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: ${error.message}`);
            return false;
        }
    }

    async testDatabaseStats() {
        try {
            console.log('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            const statsResponse = await axios.get(`${BASE_URL}/filters/stats`);
            const stats = statsResponse.data.data;
            
            console.log(`   –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${stats.totalFilters}`);
            console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.uniqueCategories}`);
            console.log(`   –¢–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${stats.filterTypes.join(', ')}`);
            
            if (stats.categoryStats && stats.categoryStats.length > 0) {
                console.log('\nüìã –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
                stats.categoryStats.slice(0, 5).forEach(stat => {
                    console.log(`   ${stat.categoryName || `Section ${stat._id}`}: ${stat.count} —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
                });
            }
            
            return true;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            return false;
        }
    }
}

async function main() {
    const tester = new FiltersAPITester();
    
    try {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await tester.runTests();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await tester.testSpecificFilter();
        await tester.testDatabaseStats();
        
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = FiltersAPITester; 