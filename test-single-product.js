const mongoose = require('mongoose');
const Product = require('./models/Product.js');
require('dotenv').config();

async function testSingleProduct() {
    try {
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const product = await Product.findOne({
            'section._id': { $exists: true },
            productValues: { $exists: true }
        }).select('section productValues').lean();

        if (!product) {
            console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç:');
        console.log('section._id:', product.section._id);
        console.log('productValues keys:', Object.keys(product.productValues));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filters = new Map();

        Object.keys(product.productValues).forEach(key => {
            const value = product.productValues[key];
            console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á: ${key}`);
            console.log('–ó–Ω–∞—á–µ–Ω–∏–µ:', {
                type: typeof value,
                hasEdges: !!value.edges,
                edgesLength: value.edges?.length || 0
            });
            
            if (value && value.edges && Array.isArray(value.edges)) {
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${value.edges.length} edges`);
                
                value.edges.forEach((edge, index) => {
                    if (edge && edge.node) {
                        const { title, value: nodeValue } = edge.node;
                        console.log(`  ${index + 1}. title: "${title}", value: "${nodeValue}"`);
                        
                        if (title && nodeValue) {
                            if (filters.has(title)) {
                                const existingFilter = filters.get(title);
                                if (!existingFilter.values.includes(nodeValue)) {
                                    existingFilter.values.push(nodeValue);
                                }
                            } else {
                                filters.set(title, {
                                    title: title,
                                    values: [nodeValue]
                                });
                            }
                        }
                    }
                });
            }
        });

        console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
        console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters.size);
        
        filters.forEach((filter, title) => {
            console.log(`\nüéØ –§–∏–ª—å—Ç—Ä: ${title}`);
            console.log('–ó–Ω–∞—á–µ–Ω–∏—è:', filter.values);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    }
}

testSingleProduct().catch(console.error); 